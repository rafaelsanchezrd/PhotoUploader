name: Build SnapFlow

on:
  push:
    branches: [ main, master, develop ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  APP_NAME: SnapFlow

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Debug - List repository contents
      shell: pwsh
      run: |
        Write-Host "=== Repository Structure ==="
        Get-Location
        Write-Host "`n=== Root Files ==="
        Get-ChildItem | Format-Table Name
        Write-Host "`n=== src/ Directory ==="
        if (Test-Path "src") {
          Get-ChildItem src | Format-Table Name
        }
        Write-Host "`n=== Checking for main.py ==="
        if (Test-Path "src/main.py") {
          Write-Host "✓ Found src/main.py"
        } else {
          Write-Host "✗ src/main.py NOT found"
        }

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        pip install Pillow

    - name: Convert PNG icon to ICO
      shell: pwsh
      run: |
        if (Test-Path "uploadericon.ico") {
          Write-Host "✓ uploadericon.ico already exists"
        } else {
          Write-Host "Converting uploadericon.png to uploadericon.ico..."
          python -c "from PIL import Image; img = Image.open('uploadericon.png'); img.save('uploadericon.ico', format='ICO', sizes=[(16,16),(32,32),(48,48),(64,64),(128,128),(256,256)])"
          if (Test-Path "uploadericon.ico") {
            Write-Host "✓ Successfully created uploadericon.ico"
          } else {
            Write-Host "✗ Failed to create .ico file"
            exit 1
          }
        }

    - name: Verify files before build
      shell: pwsh
      run: |
        Write-Host "Checking required files..."
        $files = @{
          "src/main.py" = "Main application"
          "src/config.py" = "Configuration"
          "src/dropbox_uploader.py" = "Dropbox uploader"
          "src/webhook_client.py" = "Webhook client"
          "src/utils.py" = "Utilities"
          "requirements.txt" = "Dependencies"
          "uploadericon.png" = "App icon"
          "version_info.txt" = "Version metadata"
        }

        foreach ($file in $files.Keys) {
          if (Test-Path $file) {
            Write-Host "✓ $($files[$file]): $file"
          } else {
            Write-Host "✗ $($files[$file]): $file MISSING"
          }
        }

    - name: Build Windows executable
      shell: pwsh
      run: |
        if (-not (Test-Path "src/main.py")) {
          Write-Host "ERROR: src/main.py not found!"
          exit 1
        }

        # Build from src/main.py
        pyinstaller --clean --onefile --windowed --name "${{ env.APP_NAME }}" `
          --icon=uploadericon.ico `
          --add-data "src/config.py;." `
          --add-data "src/dropbox_uploader.py;." `
          --add-data "src/webhook_client.py;." `
          --add-data "src/utils.py;." `
          --hidden-import=tkinter `
          --hidden-import=cryptography `
          --hidden-import=cryptography.fernet `
          --hidden-import=dropbox `
          --hidden-import=requests `
          --hidden-import=urllib3 `
          --hidden-import=certifi `
          --exclude-module=pytest `
          --exclude-module=setuptools `
          --exclude-module=pip `
          --noupx `
          --version-file=version_info.txt `
          src/main.py

    - name: Verify build output
      shell: pwsh
      run: |
        if (Test-Path "dist/${{ env.APP_NAME }}.exe") {
          Write-Host "✓ Build successful: dist/${{ env.APP_NAME }}.exe"
          $size = (Get-Item "dist/${{ env.APP_NAME }}.exe").Length / 1MB
          Write-Host "Size: $([math]::Round($size, 2)) MB"
        } else {
          Write-Host "✗ Build failed - exe not found"
          Write-Host "`nChecking dist folder:"
          if (Test-Path "dist") {
            Get-ChildItem dist
          } else {
            Write-Host "dist/ folder doesn't exist"
          }
          exit 1
        }

    - name: Calculate SHA256 hash
      shell: pwsh
      run: |
        $hash = (Get-FileHash "dist\${{ env.APP_NAME }}.exe" -Algorithm SHA256).Hash
        $hash | Out-File "dist\${{ env.APP_NAME }}.exe.sha256" -Encoding ASCII
        Write-Host "SHA256: $hash"
        Write-Host "WINDOWS_SHA256=$hash" >> $env:GITHUB_ENV

    - name: Create distribution info
      shell: pwsh
      run: |
        @"
        # SnapFlow - Windows Build

        **Version**: ${{ github.ref_name }}
        **Built**: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC")
        **Commit**: ${{ github.sha }}

        ## Files
        - SnapFlow.exe
        - SnapFlow.exe.sha256

        ## SHA256 Hash
        ``````
        $env:WINDOWS_SHA256
        ``````

        ## Installation
        1. Download SnapFlow.exe
        2. Right-click → Properties → Check "Unblock" if present
        3. Run the executable

        ## Antivirus Warning?
        This is a FALSE POSITIVE (common with PyInstaller apps).
        - Click "More info" → "Run anyway" in Windows Defender
        - Or check SHA256 hash matches above
        - Source code is available for verification

        See README for full instructions.
        "@ | Out-File "dist\README-Windows.md" -Encoding UTF8

    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}-Windows
        path: |
          dist/${{ env.APP_NAME }}.exe
          dist/${{ env.APP_NAME }}.exe.sha256
          dist/README-Windows.md
        retention-days: 90

    - name: Upload to Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/${{ env.APP_NAME }}.exe
          dist/${{ env.APP_NAME }}.exe.sha256
          dist/README-Windows.md
        fail_on_unmatched_files: false

  build-macos:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Debug - List repository contents
      run: |
        echo "=== Repository Structure ==="
        pwd
        echo ""
        echo "=== Root Files ==="
        ls -la
        echo ""
        echo "=== src/ Directory ==="
        if [ -d "src" ]; then
          ls -la src/
        fi
        echo ""
        echo "=== Checking for main.py ==="
        if [ -f "src/main.py" ]; then
          echo "✓ Found src/main.py"
        else
          echo "✗ src/main.py NOT found"
        fi

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        pip install Pillow

    - name: Convert PNG icon to ICNS
      run: |
        if [ -f "uploadericon.icns" ]; then
          echo "✓ uploadericon.icns already exists"
        else
          echo "Converting uploadericon.png to uploadericon.icns..."
          python3 << 'PYEOF'
        from PIL import Image
        import os

        # Open PNG
        img = Image.open('uploadericon.png')

        # Create iconset directory
        iconset_dir = 'uploadericon.iconset'
        os.makedirs(iconset_dir, exist_ok=True)

        # Generate required icon sizes for macOS
        sizes = [16, 32, 128, 256, 512]
        for size in sizes:
            # Standard resolution
            img_resized = img.resize((size, size), Image.Resampling.LANCZOS)
            img_resized.save(f'{iconset_dir}/icon_{size}x{size}.png')

            # Retina (@2x) resolution
            size_2x = size * 2
            img_resized_2x = img.resize((size_2x, size_2x), Image.Resampling.LANCZOS)
            img_resized_2x.save(f'{iconset_dir}/icon_{size}x{size}@2x.png')

        print("✓ Icon sizes generated")
        PYEOF

          # Convert iconset to icns using macOS tool
          iconutil -c icns uploadericon.iconset
          rm -rf uploadericon.iconset

          if [ -f "uploadericon.icns" ]; then
            echo "✓ Successfully created uploadericon.icns"
          else
            echo "✗ Failed to create .icns file"
            exit 1
          fi
        fi

    - name: Install create-dmg
      run: |
        brew install create-dmg

    - name: Verify files before build
      run: |
        echo "Checking required files..."
        files="src/main.py src/config.py src/dropbox_uploader.py src/webhook_client.py src/utils.py requirements.txt uploadericon.icns"
        for file in $files; do
          if [ -f "$file" ]; then
            echo "✓ $file"
          else
            echo "✗ $file MISSING"
          fi
        done

    - name: Build macOS application
      run: |
        if [ ! -f "src/main.py" ]; then
          echo "ERROR: src/main.py not found!"
          exit 1
        fi

        # Build from src/main.py
        pyinstaller --clean --onefile --windowed --name "${{ env.APP_NAME }}" \
          --icon=uploadericon.icns \
          --add-data "src/config.py:." \
          --add-data "src/dropbox_uploader.py:." \
          --add-data "src/webhook_client.py:." \
          --add-data "src/utils.py:." \
          --hidden-import=cryptography \
          --hidden-import=cryptography.fernet \
          --hidden-import=dropbox \
          --hidden-import=requests \
          --hidden-import=urllib3 \
          --hidden-import=certifi \
          --exclude-module=pytest \
          --exclude-module=setuptools \
          --exclude-module=pip \
          --osx-bundle-identifier "com.snapflow.app" \
          src/main.py

    - name: Verify build output
      run: |
        if [ -d "dist/${{ env.APP_NAME }}.app" ]; then
          echo "✓ Build successful: dist/${{ env.APP_NAME }}.app"
          du -sh "dist/${{ env.APP_NAME }}.app"
        else
          echo "✗ Build failed - .app not found"
          echo ""
          echo "Checking dist folder:"
          if [ -d "dist" ]; then
            ls -la dist/
          else
            echo "dist/ folder doesn't exist"
          fi
          exit 1
        fi

    - name: Set permissions
      run: |
        chmod +x "dist/${{ env.APP_NAME }}.app/Contents/MacOS/${{ env.APP_NAME }}"

    - name: Create DMG
      run: |
        echo "Creating DMG installer..."

        # Check for background image (note: your file is .dmg-background.png)
        if [ -f ".dmg-background.png" ]; then
          echo "Found background image, creating fancy DMG..."
          create-dmg \
            --volname "SnapFlow" \
            --volicon "uploadericon.png" \
            --background ".dmg-background.png" \
            --window-pos 200 120 \
            --window-size 600 400 \
            --icon-size 100 \
            --icon "${{ env.APP_NAME }}.app" 175 190 \
            --hide-extension "${{ env.APP_NAME }}.app" \
            --app-drop-link 425 190 \
            --format UDZO \
            "dist/${{ env.APP_NAME }}.dmg" \
            "dist/${{ env.APP_NAME }}.app" \
            && echo "✓ Fancy DMG created" \
            || {
              echo "⚠ Fancy DMG failed, trying simple DMG..."
              rm -f "dist/${{ env.APP_NAME }}.dmg"
              mkdir -p dist/dmg_temp
              cp -R "dist/${{ env.APP_NAME }}.app" dist/dmg_temp/
              ln -s /Applications dist/dmg_temp/Applications
              hdiutil create -volname "SnapFlow" \
                -srcfolder dist/dmg_temp \
                -ov -format UDZO \
                "dist/${{ env.APP_NAME }}.dmg"
              rm -rf dist/dmg_temp
              echo "✓ Simple DMG created"
            }
        else
          echo "No background image (.dmg-background.png), creating simple DMG..."
          mkdir -p dist/dmg_temp
          cp -R "dist/${{ env.APP_NAME }}.app" dist/dmg_temp/
          ln -s /Applications dist/dmg_temp/Applications
          hdiutil create -volname "SnapFlow" \
            -srcfolder dist/dmg_temp \
            -ov -format UDZO \
            "dist/${{ env.APP_NAME }}.dmg"
          rm -rf dist/dmg_temp
          echo "✓ Simple DMG created"
        fi

    - name: Verify DMG
      run: |
        if [ -f "dist/${{ env.APP_NAME }}.dmg" ]; then
          echo "✓ DMG created successfully"
          ls -lh "dist/${{ env.APP_NAME }}.dmg"
        else
          echo "✗ DMG creation failed"
          exit 1
        fi

    - name: Calculate SHA256 hash
      run: |
        cd dist
        shasum -a 256 "${{ env.APP_NAME }}.dmg" > "${{ env.APP_NAME }}.dmg.sha256"
        cat "${{ env.APP_NAME }}.dmg.sha256"
        echo "MACOS_SHA256=$(cat ${{ env.APP_NAME }}.dmg.sha256 | awk '{print $1}')" >> $GITHUB_ENV

    - name: Create distribution info
      run: |
        cat > "dist/README-macOS.md" << 'EOF'
        # SnapFlow - macOS Build

        **Version**: ${{ github.ref_name }}
        **Built**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        **Commit**: ${{ github.sha }}

        ## Files
        - SnapFlow.dmg (DMG installer)
        - SnapFlow.dmg.sha256 (verification hash)

        ## SHA256 Hash
        ```
        ${{ env.MACOS_SHA256 }}
        ```

        ## Installation
        1. Download SnapFlow.dmg
        2. Open the DMG file
        3. Drag SnapFlow.app to Applications folder
        4. **First run only**: Right-click → Open (bypasses Gatekeeper)
        5. Click "Open" in the security dialog

        ## Gatekeeper Warning?
        This app is NOT code-signed yet (working on it!).
        - **Safe to use**: Source code is fully available
        - **Verification**: Check SHA256 hash matches above
        - Right-click → Open to bypass the warning

        See README for full instructions.
        EOF

    - name: Upload macOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}-macOS
        path: |
          dist/${{ env.APP_NAME }}.dmg
          dist/${{ env.APP_NAME }}.dmg.sha256
          dist/README-macOS.md
        retention-days: 90

    - name: Upload to Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/${{ env.APP_NAME }}.dmg
          dist/${{ env.APP_NAME }}.dmg.sha256
          dist/README-macOS.md
        fail_on_unmatched_files: false

  create-release-notes:
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create Release Notes
      run: |
        cat > RELEASE_NOTES.md << 'EOF'
        ## 📸 SnapFlow ${{ github.ref_name }}

        Desktop application for photographers to upload photos to Dropbox via Make.com workflow.

        ### 📦 Downloads

        | Platform | File | SHA256 |
        |----------|------|--------|
        | Windows | SnapFlow.exe | See .sha256 file |
        | macOS | SnapFlow.dmg | See .sha256 file |

        ### 🪟 Windows Installation

        1. Download `SnapFlow.exe`
        2. Right-click → Properties → Check "Unblock"
        3. Run the application

        **⚠️ Antivirus Warning?** This is a false positive - click "More info" → "Run anyway"

        ### 🍎 macOS Installation

        1. Download `SnapFlow.dmg`
        2. Open DMG and drag to Applications
        3. **First run**: Right-click → Open

        ### 🔐 Security

        - SHA256 hashes provided for verification
        - Source code available on GitHub
        - Not code-signed yet (working on it!)

        ---

        **Need help?** Open an issue or check the documentation.
        EOF

    - name: Update Release
      uses: softprops/action-gh-release@v1
      with:
        body_path: RELEASE_NOTES.md
        fail_on_unmatched_files: false